{"version":3,"file":"level_control.min.js","sources":["../src/level_control.js"],"sourcesContent":["/* eslint-disable no-eq-null */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * @package   gradingform_frubric\n * @copyright 2021 Veronica Bermegui\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/log', 'core/str', 'core/notification', 'gradingform_frubric/feditor_helper', 'core/templates'],\n    function ($, Log, Str, Notification, FeditorHelper, Templates) {\n        'use strict';\n        /**\n         *\n         * @param {*} id\n         * @param {*} parentid\n         */\n        function init(id, parentid) {\n\n            const mode = FeditorHelper.getMode();\n            const level = document.getElementById(id);\n\n            let control = new LevelControl(level, mode, id, parentid);\n            control.main();\n\n        }\n\n\n     /**\n      *\n      * @param {*} level\n      * @param {*} mode\n      * @param {*} id\n      * @param {*} parentid\n      */\n        function LevelControl(level, mode, id, parentid) {\n            const self = this;\n            self.level = level;\n            self.mode = mode;\n            self.id = id;\n            self.parentid = parentid;\n            self.parentidaux = parentid;\n            self.LEVEL_DESCRIPTOR_INPUT = 'gradingform_frubric/level_descriptor_input';\n            self.LEVEL_DECRIPTORS_DELETE_SET = 'gradingform_frubric/level_decriptors_delete_set';\n        }\n\n        /**\n         * Run the controller.\n         */\n        LevelControl.prototype.main = function() {\n            let self = this;\n\n            if (self.mode == 'edit') {\n                if (self.level.classList.contains('criterion-header')) {\n                    self.editModeSetupEvents(self.level.nextElementSibling);\n                } else {\n                    self.editModeSetupEvents(self.level);\n                }\n            } else {\n                if (self.level != null) {\n                    // CASE: last level  has 0 mark.\n                    // A new level is added, previous level can't be zero.\n                    // As 0 is only allowed for the last level,\n                    self.validatePreviousMarkValue();\n                    self.setupEvents(self.level);\n                }\n            }\n\n        };\n\n        LevelControl.prototype.editModeSetupEvents = function (level) {\n            const self = this;\n            // Get the current level. Its the new level added.\n            if (level.getAttribute('data-row-type') == 'result'\n                || level.getAttribute('data-row-type') == 'add-level-r') {\n                level = level.previousElementSibling;\n            }\n\n            const [del, markandesc] = level.children;\n\n            const markdesctable = markandesc.querySelector('.level-mark-desc-table');\n\n            if (markdesctable) {\n                var firstcell = markdesctable.closest('tr'); // Get the delete column for the entire level.\n                firstcell = $(firstcell).children('td:first')[0];\n                firstcell.querySelector('.action-el').addEventListener('click', self.deleteLevel.bind(self));\n\n                let rows = markdesctable.rows;\n                $(rows).each(function (index, row) {\n\n                    $(row).children().each(function (j, td) {\n                        if (td.classList.contains('level-mark')) {\n                            td.querySelector('.level-mark > textarea').addEventListener('focus', self.editmark.bind(self));\n                        }\n\n                        $(td).children().each(function (wy, i) {\n\n                            const container = this;\n\n                            if (container.classList.contains('standard-desc-container')) {\n\n                                self.editModeSetupEventsHelper(container);\n                            }\n\n                            if (container.classList.contains('add-descriptor')) {\n                                container.querySelector('.add-desc-btn').addEventListener('click', self.addDescriptor.bind(self));\n                            }\n\n                            if (container.classList.contains('action-delete-set-desc')) {\n\n                                container.addEventListener('click', self.deleteSetCriterion.bind(self));\n                            }\n\n                        });\n\n                    });\n\n                });\n            }\n\n\n        };\n\n        LevelControl.prototype.editModeSetupEventsHelper = function (desciptorContainer) {\n\n            var self = this;\n            let counter = 0;\n            counter = desciptorContainer.children.length;\n\n            if (counter > 0) { // All the descriptors for this level where deleted previously.\n\n                self.descriptorIndex = counter;\n                self.parentid = desciptorContainer.children[0].getAttribute('data-parent-id');\n                self.lid = desciptorContainer.children[0].getAttribute('id');\n\n                $(desciptorContainer).each(function (i, td) {\n                    $(td).children().each(function (x) {\n\n                        const container = this;\n\n                        if (container.classList.contains('fmark')) {\n                            return;\n                        }\n\n                        container.setAttribute('descriptor-index', x);\n                        const action = container.querySelector('.action-el');\n                        const checkbox = container.querySelector('.standard-check');\n                        const descriptor = container.querySelector('.standard-desc');\n\n                        /**Add focus and click events to the descriptor. SO it always picks up the change */\n                        descriptor.addEventListener('click', self.clickDescriptorHandler.bind(this, self));\n                        descriptor.addEventListener('focus', self.clickDescriptorHandler.bind(this, self));\n                        action.addEventListener('click', self.deleteDescriptor.bind(self, descriptor, container));\n                        checkbox.addEventListener('click', self.selectdescriptor.bind(this, self));\n\n                    });\n                });\n            }\n        }\n\n        LevelControl.prototype.setupEvents = function (level) {\n\n            let self = this;\n            const [del, markandesc] = level.children;\n            const markdesctable = markandesc.querySelector('.level-mark-desc-table');\n\n            if (markdesctable) {\n\n                const [marktd, descriptortd] = markdesctable.rows[0].children;\n                marktd.querySelector('.level-mark > textarea').addEventListener('focus', self.editmark.bind(self));\n\n                if (self.mode != 'edit') {\n                    descriptortd.querySelector('.add-desc-btn').addEventListener('click', self.addDescriptor.bind(self));\n                }\n\n                del.addEventListener('click', self.deleteLevel.bind(self));\n            }\n\n        };\n\n        LevelControl.prototype.editmark = function (e) {\n\n            const self = this;\n            const score = e.target;\n\n            if (score.innerHTML == '[Min - Max]') {\n                score.innerHTML = '';\n            }\n\n            if (e.target.classList.contains('is-invalid')) {\n                e.target.classList.remove('is-invalid');\n                e.target.classList.remove('form-control');\n                e.target.removeAttribute('title');\n            }\n\n            score.focus();\n\n            if (!score.classList.contains('changeh')) {\n                score.addEventListener('change', self.changeMarkHandler.bind(this, self));\n                score.classList.add('changeh');\n            }\n\n        };\n\n        LevelControl.prototype.changeMarkHandler = function (s, e) {\n\n            // If it came from validatePreviousMarkValue we need to remove the class warning\n            s.cleanPreviousMarkWarning();\n            // Remove error message if the user inserted wrong data before.\n            e.target.classList.remove('total-input-error');\n            e.target.removeAttribute('data-toggle');\n            e.target.removeAttribute('data-placement');\n            e.target.removeAttribute('data-title');\n\n            const el = document.getElementById(e.target.getAttribute('aria-describedby'));\n\n            if (el != null) {\n                el.parentNode.removeChild(el);\n                e.target.removeAttribute('data-original-title');\n                e.target.removeAttribute('title');\n                e.target.removeAttribute('aria-describedby');\n\n            }\n\n            var levelid;\n\n            if (e.target.getAttribute('data-level-id') != null) {\n                levelid = e.target.getAttribute('data-level-id');\n            }\n            // Update the score for this criterion.\n            const criteria = FeditorHelper.getCriteriaJSON();\n            const criterion = FeditorHelper.getCriterionFromCriteriaCollection(document.getElementById(s.id), criteria);\n            const levelsdesc = s.getLevelDescriptors(s.id, criteria, levelid);\n            const score = (e.target.value).trim();\n            const nonum = /[a-z]/gi.test(score);\n\n            let error = false;\n            let message = '';\n\n            if (nonum) {\n                error = true;\n                message = 'Please insert a number value range';\n            } else {\n\n                if (score.indexOf('-') == -1 && score.indexOf('/') == -1) {\n                    error = true;\n                    message = 'Invalid value. Accepts min-max or min/max';\n                } else {\n                    // Evaluate min/max\n                    var [min, max] = FeditorHelper.getMinMax(score);\n                    if (min.length == 0 || max.length == 0) {\n                        error = true;\n                    } else if ((min.length > 0 && max.length > 0) && (parseFloat(min) > parseFloat(max))) {\n                        error = true;\n                        message = 'Min value is greater than max value';\n                    }\n\n                }\n            }\n\n            if (error) {\n                s.setErrorMessage(e, message);\n                error = false;\n                return;\n            }\n\n            var groupid;\n            // Update the total result input. with the highest value.\n            groupid = document.getElementById(s.id).getAttribute('data-criterion-group');\n\n            const resultRow = document.querySelector(`[data-criterion-group=\"${groupid}\"][data-row-type=\"result\"]`);\n            var total = (resultRow.querySelector(`#out-of-value-${groupid}`).innerHTML).split(\"/\");\n\n            total =  FeditorHelper.getMaxValueInLevelInCriterion(groupid);\n            const maxinput = resultRow.querySelector('.total-input');\n\n            levelsdesc[0].score = e.target.value.trim();\n\n            if (levelsdesc[0].status == 'CREATED' || levelsdesc[0].status == 'UPDATED') {\n                levelsdesc[0].status = 'UPDATE';\n            }\n\n            resultRow.querySelector(`#out-of-value-${groupid}`).innerHTML = `/${total}`;\n\n            // Update the max attribute.\n            maxinput.setAttribute(\"max\", total);\n            criterion[0].totaloutof = total;\n\n            FeditorHelper.setCriteriaJSON(criteria);\n            FeditorHelper.setHiddenCriteriaJSON(criteria);\n\n        };\n\n        LevelControl.prototype.addDescriptor = function (e) {\n            const self = this;\n            e.stopImmediatePropagation();\n            e.preventDefault();\n\n            // Get the standard-desc-container  that contains the descritors.\n            const descriptorContainer = FeditorHelper.getPreviousElement(e.target.parentNode, '.standard-desc-container');\n            var positionLevel = 0;\n\n            let id;\n            if ((self.mode != 'edit') || descriptorContainer.children.length == 0) {\n                id = `${self.id}-${FeditorHelper.getRandomID()}`;\n                positionLevel = descriptorContainer.children.length; // By adding the delete set\n            } else {\n                id = `${self.id}-${descriptorContainer.children[0].getAttribute('id')}`;\n            }\n            var countingdel = false;\n\n            if (descriptorContainer.children.length > 0) {\n                positionLevel = descriptorContainer.children.length - 1; // When we add the first element, the delete set span is addedd too. we need to only count the divs t oget the right index.\n\n                if (descriptorContainer.children[0].classList.contains('action-delete-set-desc')) {\n                    countingdel = true;\n                }\n            }\n\n            if (self.parentid == undefined) { // Level with no descriptor, User clicked save anf make it ready\n                var editaddnewlevel = false;\n\n            } else if (self.parentid.includes('frubric-criteria-NEWID')) {\n                editaddnewlevel = self.parentid.includes('frubric-criteria-NEWID');\n            }\n\n            const context = {\n                id: id,\n                parentid: self.parentid,\n                edit: self.mode == 'edit',\n                editaddnewlevel: editaddnewlevel,\n                index: (countingdel) ? descriptorContainer.children.length - 1 : descriptorContainer.children.length,\n                poslevel: positionLevel\n            };\n\n            if (self.mode != 'edit') {\n                delete context.index;\n            }\n\n            Templates.render(self.LEVEL_DESCRIPTOR_INPUT, context)\n                .done(function (html, js) {\n\n                    let addDeleteSet = false;\n                    if (descriptorContainer.children.length == 0) {\n                        addDeleteSet = true\n                    }\n                    descriptorContainer.insertAdjacentHTML('beforeend', html);\n\n                    if (addDeleteSet) {\n                        descriptorContainer.insertAdjacentHTML(\"afterbegin\", '  <span class=\"action-delete-set-desc  first-time-render\"> <i class=\"fa fa-close  first-time-render\" title=\"Delete set of descriptors\"></i></span>');\n                        descriptorContainer.querySelector('.action-delete-set-desc').addEventListener('click', self.deleteSetCriterion.bind(self));\n                    }\n\n                    const container = descriptorContainer.lastChild;\n                    const action = container.querySelector('.action-el');\n                    const checkbox = container.querySelector('.standard-check');\n                    const descriptor = container.querySelector('.standard-desc');\n\n                    descriptor.addEventListener('click', self.clickDescriptorHandler.bind(this, self));\n                    action.addEventListener('click', self.deleteDescriptor.bind(self, descriptorContainer, container));\n                    checkbox.addEventListener('click', self.selectdescriptor.bind(this, self)); // TODO: DO I NEED THIS?\n\n                    let criteria = FeditorHelper.getCriteriaJSON();\n                    let container2 = descriptorContainer.lastElementChild;\n                    if (container != null) {\n                        FeditorHelper.setCriteriaJSON(criteria);\n                        FeditorHelper.setHiddenCriteriaJSON(criteria);\n                    }\n                })\n                .fail(function (ex) {\n                    Log.debug(\"error...\");\n                });\n\n\n        }\n\n\n\n        LevelControl.prototype.clickDescriptorHandler = function (s, e) {\n\n            let descriptor = e.target;\n            descriptor.focus();\n\n            if (e.target.classList.contains('is-invalid')) {\n                e.target.classList.remove('is-invalid');\n                e.target.classList.remove('form-control');\n                e.target.removeAttribute('title')\n            }\n            // Attach change event\n            descriptor.addEventListener('change', s.changeDescriptorHandler.bind(this, s));\n            // If you copy and paste content without clicking it doesnt pick up the change. Add paste event\n            descriptor.addEventListener('paste', s.changeDescriptorHandler.bind(this, s));\n\n        }\n\n        LevelControl.prototype.changeDescriptorHandler = function (s, e) {\n            const criteria = FeditorHelper.getCriteriaJSON();\n            const containerid = e.target.getAttribute('data-container-id');\n            let levelid;\n            let descriptorIndex = e.target.parentNode.getAttribute('descriptor-index');\n\n            if (descriptorIndex != null) {\n                levelid = e.target.parentNode.getAttribute('id');\n            } else {\n                descriptorIndex = Array.from(document.getElementById(containerid).parentNode.children).indexOf(e.target.parentNode) - 1;\n            }\n\n            // We are adding a descriptor to a level that is already in the DB. Make sure is not a rerender for failing\n            if (levelid != undefined && levelid.includes(\"-\") && !document.getElementById('id_criteria').classList.contains('is-invalid')) {\n                levelid.slice(levelid.indexOf('-') + 1, levelid.length);\n            }\n\n            const levelsdesc = s.getLevelDescriptors(s.id, criteria, levelid);\n\n            if (descriptorIndex > levelsdesc[0].descriptors.length) { // Add descriptors inbetween when updating descriptors in different order.\n                for (var i = (levelsdesc[0].descriptors.length); i < descriptorIndex; i++) {\n\n                    levelsdesc[0].descriptors.push({\n                        checked: false,\n                        descText: '',\n                        delete: 0,\n                        descriptorid: 0\n                    });\n                }\n\n            }\n\n            const desc = levelsdesc[0].descriptors[descriptorIndex];\n\n            if (desc == undefined) { // New entry\n                levelsdesc[0].descriptors.push({\n                    checked: false,\n                    descText: e.target.value,\n                    delete: 0,\n                    descriptorid: 0\n                });\n\n            } else { // Existing entry, update text.\n\n                desc.descText = e.target.value;\n            }\n\n            if (levelsdesc[0].status == 'CREATED' || levelsdesc[0].status == 'UPDATED') {\n                levelsdesc[0].status = 'UPDATE';\n            }\n\n            FeditorHelper.setCriteriaJSON(criteria);\n            FeditorHelper.setHiddenCriteriaJSON(criteria);\n\n        }\n\n        LevelControl.prototype.selectdescriptor = function (e, s) {\n\n            const containerid = s.target.getAttribute('data-container-id');\n            const criteria = FeditorHelper.getCriteriaJSON();\n            let levelsdesc;\n            let descriptorIndex = s.target.parentNode.getAttribute('descriptor-index');\n\n            if (descriptorIndex != null) {\n                const levelid = s.target.parentNode.getAttribute('id');\n                levelsdesc = e.getLevelDescriptors(e.id, criteria, levelid);\n            } else {\n                descriptorIndex = Array.from(document.getElementById(containerid).parentNode.children).indexOf(s.target.parentNode);\n                levelsdesc = e.getLevelDescriptors(e.id, criteria);\n            }\n\n            const d = levelsdesc[0].descriptors[descriptorIndex];\n            d.checked = s.target.checked;\n\n            // check if its already in the DB, if so, change the status\n            if (levelsdesc[0].status == 'CREATED' || levelsdesc[0].status == 'UPDATED') {\n                levelsdesc[0].status = 'UPDATE';\n            }\n            // Update the input.\n            FeditorHelper.setCriteriaJSON(criteria);\n            FeditorHelper.setHiddenCriteriaJSON(criteria);\n        }\n\n        LevelControl.prototype.deleteDescriptor = function (descriptorContainer, checkboxcontainer) {\n\n            var self = this;\n            if (checkboxcontainer.getAttribute('descriptor-index')) { // This means the descriptor is already saved in the BD. ask if theya re sure to remove\n\n                Str.get_strings([{\n                        key: 'confirm',\n                        component: 'gradingform_frubric'\n                    },\n                    {\n                        key: 'confirmdeletedescriptor',\n                        component: 'gradingform_frubric'\n                    },\n                    {\n                        key: 'yes'\n                    },\n                    {\n                        key: 'no'\n                    },\n\n                ]).done(function (strs) {\n                    Notification.confirm(strs[0], strs[1], strs[2], strs[3], function () {\n\n                        const criteria = FeditorHelper.getCriteriaJSON();\n                        const levelid = checkboxcontainer.getAttribute('id');\n                        const parentid = self.id;\n                        const descriptorIndex = checkboxcontainer.getAttribute('descriptor-index');\n\n                        const levelsdesc = self.getLevelDescriptors(parentid, criteria, levelid);\n                        const d = levelsdesc[0].descriptors[descriptorIndex];\n\n                        // Check that the descriptor you want to delete was saved in the DB.\n                        // Else, you just have to remove it and update the JSON to avoid updates to the level.\n                        if (d.descriptorid != 0) {\n                            d.delete = 1;\n                            levelsdesc[0].status = 'UPDATE';\n\n                            let countdeleted = 0;\n                            levelsdesc[0].descriptors.forEach(function (desc, index) {\n                                if (desc.delete == 1) {\n                                    countdeleted++;\n                                }\n                            }, countdeleted);\n\n                            // Check if its the only descritor in the level. If it is, then remove the level completely\n                            if (levelsdesc[0].descriptors.length == countdeleted) {\n                                const checkboxaux = checkboxcontainer;\n                                levelsdesc[0].status = 'DELETE';\n\n                                // Check if the definition only has one criterion. If it does, and the level is removed. then the criterion has to be deleted too\n                                if (criteria.length == 1) {\n                                    criteria[0].status = 'DELETE';\n                                }\n\n                                criteria.forEach(function (criterion) {\n                                    if (criterion.id == parentid) {\n                                        if (criterion.levels.length == 1) { // There is only one level in this criterion. Check if the descriptor has info.\n                                            criterion.status = 'DELETE'\n\n                                        } else {\n                                            criterion.status = 'UPDATE'\n                                        }\n                                    }\n                                }, parentid);\n\n\n                            }\n                        } else {\n                            levelsdesc[0].descriptors.splice(descriptorIndex, 1);\n                            self.updateDescriptorIndex(descriptorContainer);\n                        }\n\n                        // Get a reference to the parent container to be able to reasing the index\n                        checkboxcontainer.parentNode\n                        checkboxcontainer.style.display = 'none'; // I need to keep the element in the dom because if i add a new element after deleting one, it doesnt work properly.\n                        // Update the input.\n                        FeditorHelper.setCriteriaJSON(criteria);\n                        FeditorHelper.setHiddenCriteriaJSON(criteria);\n\n                    }, function () {\n                        // For the cancel btn.\n                        return;\n                    });\n                });\n\n            } else {\n\n                const descriptorindex = checkboxcontainer.getAttribute('data-pos-level');\n                const parentid = self.id;\n                const criteria = FeditorHelper.getCriteriaJSON();\n                const row = document.getElementById(parentid);\n                const criterion = FeditorHelper.getCriterionFromCriteriaCollection(row, criteria);\n                const level = criterion[0].levels.filter(function (l) {\n                    if (l.id == parentid) {\n                        return l.descriptors;\n                    }\n                }, parentid);\n\n                const descriptors = (level[0]).descriptors;\n                descriptors.splice(descriptorindex, 1);\n                descriptorContainer.removeChild(checkboxcontainer);\n                self.updateDescriptorIndex(descriptorContainer);\n\n                // UPDATE JSON\n                FeditorHelper.setCriteriaJSON(criteria);\n                FeditorHelper.setHiddenCriteriaJSON(criteria);\n\n            }\n        };\n\n        LevelControl.prototype.deleteSingleDescriptorNotSavedInDB = function (checkboxcontainer) {\n\n            const descriptorindex = checkboxcontainer.getAttribute('data-pos-level');\n            const parentid = self.id;\n            const criteria = FeditorHelper.getCriteriaJSON();\n            const row = document.getElementById(parentid);\n            const criterion = FeditorHelper.getCriterionFromCriteriaCollection(row, criteria);\n            const level = criterion[0].levels.filter(function (l) {\n                if (l.id == parentid) {\n                    return l.descriptors;\n                }\n            }, parentid);\n\n            const descriptors = (level[0]).descriptors;\n            descriptors.splice(descriptorindex, 1);\n            descriptorContainer.removeChild(checkboxcontainer);\n            self.updateDescriptorIndex(descriptorContainer);\n            // UPDATE JSON\n            FeditorHelper.setCriteriaJSON(criteria);\n            FeditorHelper.setHiddenCriteriaJSON(criteria);\n        }\n\n\n        LevelControl.prototype.updateDescriptorIndex = function (descriptorContainer) {\n\n            $(descriptorContainer).children('div.checkbox-container').each(function (i) {\n                this.setAttribute('data-pos-level', i);\n            });\n        }\n\n\n\n        LevelControl.prototype.deleteSetCriterion = function (e) {\n\n            Str.get_strings([{\n                    key: 'confirm',\n                    component: 'gradingform_frubric'\n                },\n                {\n                    key: 'confirmdeletesetcriterion',\n                    component: 'gradingform_frubric'\n                },\n                {\n                    key: 'yes'\n                },\n                {\n                    key: 'no'\n                },\n\n            ]).done(function (strs) {\n                Notification.confirm(strs[0], strs[1], strs[2], strs[3], function () {\n                    const tr = e.target.closest('tr'); // get the tr this element is in\n                    const table = e.target.closest('.level-mark-desc-table');\n                    const criteria = JSON.parse(document.getElementById('id_criteria').value);\n                    const fromRenderer = e.target.classList.contains(\"first-time-render\"); // When adding a new descriptor that was not saved in the db, just delete it.\n\n                    if (table.rows.length == 1) {\n                        const level = table.closest(\"[data-criterion-group]\");\n\n                        if (!fromRenderer) {\n                            criteria.forEach(function (criterion) {\n                                if (criterion.id == level.getAttribute('data-criterion-group')) {\n                                    criterion.status = 'DELETE';\n\n                                    const cl = Object.values(criterion.levels);\n\n                                    cl.forEach(function (level) {\n\n                                        if (level.status != \"NEW\") { // Case: We want to add a new level and delete the current one.\n                                            level.status = 'DELETE';\n                                            criterion.status = \"UPDATE\";\n\n                                        }\n                                    }, criterion);\n                                }\n                            });\n\n                        }\n\n                        level.remove();\n\n                    } else {\n\n                        // It has a few levels.\n                        const crit = tr.closest(\"[data-criterion-group]\"); // This row has the criterion these levels belong to\n                        const descriptors = Array.from(e.target.parentNode.nextElementSibling.children);\n                        const descriptorids = [];\n\n                        descriptors.forEach(function (desc) {\n                            descriptorids.push(desc.id);\n                        }, descriptorids);\n\n                        const data = {\n                            crit: crit,\n                            descids: descriptorids\n                        }\n\n                        if (!fromRenderer) {\n                            criteria.forEach(function (criterion) {\n                                if (criterion.id == data.crit.getAttribute('data-criterion-group')) {\n                                    criterion.status = 'UPDATE';\n\n                                    if (!Array.isArray(criterion.levels)) { // Check if the criteria has levels\n                                        criterion.levels = Object.values(criterion.levels);\n                                    }\n                                    criterion.levels.forEach(function (level) {\n\n                                        if (data.descids.includes((level.id).toString())) {\n\n                                            level.descriptors.forEach(function (d) {\n                                                d.delete = 1;\n                                            });\n                                            level.status = 'DELETE';\n\n                                        }\n                                    }, data.descids);\n\n                                }\n                            }, data);\n                        }\n\n                        table.deleteRow(tr.rowIndex);\n                        // Controlar que el max value  refleje el maximo si hay cambios\n                    }\n\n                    // document.getElementById('id_criteria').value = JSON.stringify(criteria);\n                    FeditorHelper.setCriteriaJSON(criteria);\n                    FeditorHelper.setHiddenCriteriaJSON(criteria);\n\n                }, function () {\n                    // For the cancel btn.\n                    return;\n                });\n            });\n        }\n\n        LevelControl.prototype.deleteLevel = function (e) {\n\n            Str.get_strings([{\n                    key: 'confirm',\n                    component: 'gradingform_frubric'\n                },\n                {\n                    key: 'confirmdeletelevel',\n                    component: 'gradingform_frubric'\n                },\n                {\n                    key: 'yes'\n                },\n                {\n                    key: 'no'\n                },\n\n            ]).done(function (strs) {\n                Notification.confirm(strs[0], strs[1], strs[2], strs[3], function () {\n\n                    let criTable = document.getElementById('criteriaTable');\n                    const tr = e.target.parentNode.parentNode.parentNode;\n                    const criterion = FeditorHelper.getPreviousElement(tr, '.criterion-header');\n                    let criteria = FeditorHelper.getCriteriaJSON();\n                    const crid = tr.getAttribute('data-criterion-group')\n\n\n                    if (criterion.getAttribute('data-criterion-levels').length > 0) {\n\n                        const dbids = JSON.parse(criterion.getAttribute('data-criterion-levels')); // These are the ids of the levels given by the DB.\n                        const index = FeditorHelper.getDistanceFromCriterionHeader(tr, '.criterion-header');\n                        const dblevelid = dbids[index];\n\n\n                        var levels;\n\n                        for (let i = 0; i < criteria.length; i++) {\n                            if (criteria[i].id == crid) {\n                                criteria[i].status = 'UPDATE';\n                                levels = criteria[i].levels;\n                                break;\n                            }\n                        }\n\n                        for (let j = 0; j < levels.length; j++) {\n                            if (levels[j].id == dblevelid) {\n                                levels[j].status = 'DELETE';\n                                break;\n                            }\n                        }\n\n                    } else {\n\n                        // The Criteria has not been saved. No need to send it to the DB.\n\n                        const tr = e.target.closest('tr');\n                        const lid = tr.getAttribute('id');\n                        const cid = criterion.getAttribute('id');\n                        const d = {\n                            levelid: parseInt(lid),\n                            criterionid: cid\n                        }\n\n\n                        criteria.forEach(function (criterion) {\n\n                            if (criterion.cid == d.criterionid) {\n                                criterion.levels = criterion.levels.filter(function (level) {\n\n                                    if (level.id != d.levelid) {\n                                        return level;\n                                    }\n                                }, d);\n\n                            }\n                        }, d);\n\n                    }\n\n\n                    FeditorHelper.setCriteriaJSON(criteria);\n                    FeditorHelper.setHiddenCriteriaJSON(criteria);\n                    criTable.deleteRow(tr.rowIndex);\n\n\n                }, function () {\n                    // For the cancel btn.\n                    return;\n                });\n            });\n        };\n\n        LevelControl.prototype.editlevelhandler = function (e) {\n            let textarea = e.target;\n\n            textarea.removeAttribute('disabled');\n            textarea.focus();\n            textarea.addEventListener('change', this.changeLevelHandlerDisabled.bind(this, textarea));\n            textarea.addEventListener('focusout', this.focusoutHandlerDisabled);\n        };\n\n        LevelControl.prototype.changeLevelHandlerDisabled = function (txtarea, e) {\n\n            let id = e.target.parentNode.parentNode.parentNode.getAttribute('data-criterion-group');\n            const levelrow = e.target.parentNode.parentNode.parentNode;\n\n            // Get the criterion row this level belongs to\n            const criterionheader = FeditorHelper.getPreviousElement(levelrow, '.criterion-header');\n            let leveldbids = criterionheader.getAttribute('data-criterion-levels').length > 0 ? JSON.parse(criterionheader.getAttribute('data-criterion-levels')) : []; // Get the dbids\n\n            const criteriaJSON = FeditorHelper.getCriteriaJSON();\n            const rowIndex = e.target.parentNode.parentNode.parentNode.rowIndex;\n\n            let levelid = id + '_' + rowIndex;\n\n            if (leveldbids.length > 0) {\n                levelid = (leveldbids[rowIndex - 1] != undefined) ? `${id}_${leveldbids[rowIndex - 1]}` : levelid; // The criterion already exists but this is a new level, not saved in the DB yet.\n            }\n\n            const filterCriterion = criteriaJSON.filter(function (criterion, index) {\n                const id = e.target.parentNode.parentNode.parentNode.getAttribute('data-criterion-group');\n                criterion.rowindex = index;\n                if (id == criterion.id) {\n                    return criterion;\n                }\n            }, e);\n\n            // Find the level and update the values\n            if (filterCriterion[0].levels != undefined) {\n                var lev = null;\n                const critlevs = filterCriterion[0].levels;\n\n                for (let i = 0; i < critlevs.length; i++) {\n\n                    if ((critlevs[i]).id != levelid) {\n                        continue;\n                    } else {\n                        lev = critlevs[i];\n                        break;\n\n                    }\n                }\n\n                if (lev != null) {\n                    if (e.target.classList.contains('mark_txtarea')) {\n                        lev.score = e.target.value;\n                    } else {\n                        lev.definition = e.target.value;\n                    }\n                    if (lev.status == 'CREATED' || lev.status == 'UPDATED') { // It was updated before.\n                        lev.status = 'UPDATE';\n                    }\n\n                } else {\n\n                    let criterionLevel = {\n                        id: levelid,\n                        status: 'NEW',\n                        score: '',\n                        definition: ''\n                    };\n\n                    if (e.target.classList.contains('mark_txtarea')) {\n                        criterionLevel.score = e.target.value;\n                    } else {\n                        criterionLevel.definition = e.target.value;\n                    }\n                    (filterCriterion[0]).levels.push(criterionLevel);\n                }\n\n                if (FeditorHelper.getMode() == 'edit') {\n\n                    if (filterCriterion[0].cid.includes(\"NEWID\") != true) { // A new criterion added\n                        filterCriterion[0].status = \"UPDATE\"; // The criterion was updated because it has new levels.\n                    } else {\n                        filterCriterion[0].status = \"NEW\";\n                    }\n                }\n\n            }\n\n\n            FeditorHelper.setCriteriaJSON(criteriaJSON);\n            FeditorHelper.setHiddenCriteriaJSON(criteriaJSON);\n\n            e.target.setAttribute('disabled', true);\n        };\n\n        LevelControl.prototype.focusoutHandlerDisabled = function (e) {\n            e.target.setAttribute('disabled', true);\n        };\n\n        LevelControl.prototype.getLevelDescriptors = function (parentid, criteria, levelid) {\n            var self = this;\n            let row = '';\n\n            if (document.getElementById(parentid) == null) {\n                row = document.getElementById(self.level.id);\n            } else {\n                row = document.getElementById(parentid);\n            }\n\n            const criterion = FeditorHelper.getCriterionFromCriteriaCollection(row, criteria);\n            let ids;\n            // Get the level to add the descriptor\n            if (levelid != undefined) {\n                parentid = levelid; // compare to the id the DB gave to the level.\n            }\n\n            if (self.mode == 'edit' && levelid != undefined) { // if its come from the add descriptor we have the id of the level in the second part of the id given le\n                if (levelid.toString().indexOf('-') > -1) {\n                    parentid = levelid.slice(levelid.indexOf('-') + 1, levelid.length);\n                    ids = levelid.split('-');\n                    ids.forEach(function (id, index) {\n                        ids[index] = id.toString();\n                    }, ids);\n                }\n            }\n\n            const obj = {\n                mode: self.mode,\n                parentid: parentid,\n                parentidaux: self.parentidaux,\n                ids: ids\n\n            }\n\n            if (criterion[0].levels.length == 0) {\n                criterion[0].levels.push({\n                    score: '',\n                    status: \"NEW\",\n                    id: parentid,\n                    descriptors: [{\n                        checked: false,\n                        descText: '',\n                        delete: 0,\n                        descriptorid: 0\n                    }]\n                });\n            }\n            // User tried to save and make ready a criteria with a level with no descriptor.\n            //We are in the fix error view of the form\n            const levelsdesc = criterion[0].levels.filter(function (level) {\n                if (obj.ids != undefined) {\n                    if ((obj.ids).includes((level.id).toString())) {\n                        return level.descriptors;\n                    }\n                } else if (obj.parentid == (level.id).toString()\n                            || (obj.parentid).toString().includes((level.id).toString())) {\n                    return level.descriptors;\n                }\n\n\n            }, obj);\n\n\n            FeditorHelper.setCriteriaJSON(criteria);\n            FeditorHelper.setHiddenCriteriaJSON(criteria);\n\n            return levelsdesc;\n        };\n\n        LevelControl.prototype.setErrorMessage = function (e, message) {\n\n            e.target.classList.add('total-input-error');\n            e.target.setAttribute('data-toggle', 'tooltip');\n            e.target.setAttribute('data-placement', 'right');\n            e.target.setAttribute('data-title', message);\n        };\n\n        LevelControl.prototype.validatePreviousMarkValue = function () {\n            const self = this;\n\n            const previousLevel = document.getElementById(self.id).previousElementSibling;\n            const previousMark = previousLevel.querySelector('.fmark');\n            if (previousMark != null && previousMark.value == 0 && previousMark.value != \"\") {\n\n                previousLevel.classList.add('alert-warning');\n                previousMark.insertAdjacentHTML('afterend', '<small>Change Mark</small>');\n\n            }\n\n        };\n\n        LevelControl.prototype.cleanPreviousMarkWarning = function () {\n            const self = this;\n\n            const level = document.getElementById(self.id);\n            if (level.classList.contains('alert-warning')) {\n                level.classList.remove('alert-warning');\n                level.querySelector('.level-mark').removeChild(level.querySelector('small'));\n            }\n\n        };\n\n        LevelControl.prototype.countSelectedDescriptors = function () {\n\n        };\n\n\n\n\n\n\n        return {\n            init: init\n        };\n    });"],"names":["define","$","Log","Str","Notification","FeditorHelper","Templates","LevelControl","level","mode","id","parentid","this","parentidaux","LEVEL_DESCRIPTOR_INPUT","LEVEL_DECRIPTORS_DELETE_SET","prototype","main","classList","contains","editModeSetupEvents","nextElementSibling","validatePreviousMarkValue","setupEvents","self","getAttribute","previousElementSibling","children","markdesctable","querySelector","firstcell","closest","addEventListener","deleteLevel","bind","rows","each","index","row","j","td","editmark","wy","i","editModeSetupEventsHelper","addDescriptor","deleteSetCriterion","desciptorContainer","counter","length","descriptorIndex","lid","x","setAttribute","action","checkbox","descriptor","clickDescriptorHandler","deleteDescriptor","selectdescriptor","del","marktd","descriptortd","e","score","target","innerHTML","remove","removeAttribute","focus","changeMarkHandler","add","s","cleanPreviousMarkWarning","levelid","el","document","getElementById","parentNode","removeChild","groupid","criteria","getCriteriaJSON","criterion","getCriterionFromCriteriaCollection","levelsdesc","getLevelDescriptors","value","trim","error","message","test","indexOf","getMinMax","min","max","parseFloat","setErrorMessage","resultRow","total","split","getMaxValueInLevelInCriterion","maxinput","status","totaloutof","setCriteriaJSON","setHiddenCriteriaJSON","stopImmediatePropagation","preventDefault","descriptorContainer","getPreviousElement","positionLevel","getRandomID","countingdel","undefined","editaddnewlevel","includes","context","edit","poslevel","render","done","html","js","addDeleteSet","insertAdjacentHTML","container","lastChild","lastElementChild","fail","ex","debug","changeDescriptorHandler","containerid","Array","from","slice","descriptors","push","checked","descText","delete","descriptorid","desc","checkboxcontainer","get_strings","key","component","strs","confirm","d","countdeleted","forEach","levels","splice","updateDescriptorIndex","style","display","descriptorindex","filter","l","deleteSingleDescriptorNotSavedInDB","tr","table","JSON","parse","fromRenderer","Object","values","crit","descriptorids","data","descids","isArray","toString","deleteRow","rowIndex","criTable","crid","dblevelid","getDistanceFromCriterionHeader","cid","parseInt","criterionid","editlevelhandler","textarea","changeLevelHandlerDisabled","focusoutHandlerDisabled","txtarea","levelrow","criterionheader","leveldbids","criteriaJSON","filterCriterion","rowindex","lev","critlevs","definition","criterionLevel","getMode","ids","obj","previousLevel","previousMark","countSelectedDescriptors","init"],"mappings":"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"}