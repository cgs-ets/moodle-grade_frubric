{"version":3,"file":"level_control.min.js","sources":["../src/level_control.js"],"sourcesContent":["/* eslint-disable no-eq-null */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * @package   gradingform_frubric\n * @copyright 2021 Veronica Bermegui\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/log', 'core/str', 'core/notification', 'gradingform_frubric/feditor_helper', 'core/templates'],\n    function ($, Log, Str, Notification, FeditorHelper, Templates) {\n        'use strict';\n        /**\n         *\n         * @param {*} id\n         * @param {*} parentid\n         */\n        function init(id, parentid) {\n\n            const mode = FeditorHelper.getMode();\n            const level = document.getElementById(id);\n\n            let control = new LevelControl(level, mode, id, parentid);\n            control.main();\n\n        }\n\n\n     /**\n      *\n      * @param {*} level\n      * @param {*} mode\n      * @param {*} id\n      * @param {*} parentid\n      */\n        function LevelControl(level, mode, id, parentid) {\n            const self = this;\n            self.level = level;\n            self.mode = mode;\n            self.id = id;\n            self.parentid = parentid;\n            self.parentidaux = parentid;\n            self.LEVEL_DESCRIPTOR_INPUT = 'gradingform_frubric/level_descriptor_input';\n            self.LEVEL_DECRIPTORS_DELETE_SET = 'gradingform_frubric/level_decriptors_delete_set';\n        }\n\n        /**\n         * Run the controller.\n         */\n        LevelControl.prototype.main = function() {\n            let self = this;\n\n            if (self.mode == 'edit') {\n                if (self.level.classList.contains('criterion-header')) {\n                    self.editModeSetupEvents(self.level.nextElementSibling);\n                } else {\n                    self.editModeSetupEvents(self.level);\n                }\n            } else {\n                if (self.level != null) {\n                    // CASE: last level  has 0 mark.\n                    // A new level is added, previous level can't be zero.\n                    // As 0 is only allowed for the last level,\n                    self.validatePreviousMarkValue();\n                    self.setupEvents(self.level);\n                }\n            }\n\n        };\n\n        LevelControl.prototype.editModeSetupEvents = function (level) {\n            const self = this;\n            // Get the current level. Its the new level added.\n            if (level.getAttribute('data-row-type') == 'result'\n                || level.getAttribute('data-row-type') == 'add-level-r') {\n                level = level.previousElementSibling;\n            }\n\n            const [del, markandesc] = level.children;\n\n            const markdesctable = markandesc.querySelector('.level-mark-desc-table');\n\n            if (markdesctable) {\n                var firstcell = markdesctable.closest('tr'); // Get the delete column for the entire level.\n                firstcell = $(firstcell).children('td:first')[0];\n                firstcell.querySelector('.action-el').addEventListener('click', self.deleteLevel.bind(self));\n\n                let rows = markdesctable.rows;\n                $(rows).each(function (index, row) {\n\n                    $(row).children().each(function (j, td) {\n                        if (td.classList.contains('level-mark')) {\n                            td.querySelector('.level-mark > textarea').addEventListener('focus', self.editmark.bind(self));\n                        }\n\n                        $(td).children().each(function (wy, i) {\n\n                            const container = this;\n\n                            if (container.classList.contains('standard-desc-container')) {\n\n                                self.editModeSetupEventsHelper(container);\n                            }\n\n                            if (container.classList.contains('add-descriptor')) {\n                                container.querySelector('.add-desc-btn').addEventListener('click', self.addDescriptor.bind(self));\n                            }\n\n                            if (container.classList.contains('action-delete-set-desc')) {\n\n                                container.addEventListener('click', self.deleteSetCriterion.bind(self));\n                            }\n\n                        });\n\n                    });\n\n                });\n            }\n\n\n        };\n\n        LevelControl.prototype.editModeSetupEventsHelper = function (desciptorContainer) {\n\n            var self = this;\n            let counter = 0;\n            counter = desciptorContainer.children.length;\n\n            if (counter > 0) { // All the descriptors for this level where deleted previously.\n\n                self.descriptorIndex = counter;\n                self.parentid = desciptorContainer.children[0].getAttribute('data-parent-id');\n                self.lid = desciptorContainer.children[0].getAttribute('id');\n\n                $(desciptorContainer).each(function (i, td) {\n                    $(td).children().each(function (x) {\n\n                        const container = this;\n\n                        if (container.classList.contains('fmark')) {\n                            return;\n                        }\n\n                        container.setAttribute('descriptor-index', x);\n                        const action = container.querySelector('.action-el');\n                        const checkbox = container.querySelector('.standard-check');\n                        const descriptor = container.querySelector('.standard-desc');\n\n                        /**Add focus and click events to the descriptor. SO it always picks up the change */\n                        descriptor.addEventListener('click', self.clickDescriptorHandler.bind(this, self));\n                        descriptor.addEventListener('focus', self.clickDescriptorHandler.bind(this, self));\n                        action.addEventListener('click', self.deleteDescriptor.bind(self, descriptor, container));\n                        checkbox.addEventListener('click', self.selectdescriptor.bind(this, self));\n\n                    });\n                });\n            }\n        }\n\n        LevelControl.prototype.setupEvents = function (level) {\n\n            let self = this;\n            const [del, markandesc] = level.children;\n            const markdesctable = markandesc.querySelector('.level-mark-desc-table');\n\n            if (markdesctable) {\n\n                const [marktd, descriptortd] = markdesctable.rows[0].children;\n                marktd.querySelector('.level-mark > textarea').addEventListener('focus', self.editmark.bind(self));\n\n                if (self.mode != 'edit') {\n                    descriptortd.querySelector('.add-desc-btn').addEventListener('click', self.addDescriptor.bind(self));\n                }\n\n                del.addEventListener('click', self.deleteLevel.bind(self));\n            }\n\n        };\n\n        LevelControl.prototype.editmark = function (e) {\n\n            const self = this;\n            const score = e.target;\n\n            if (score.innerHTML == '[Min - Max]') {\n                score.innerHTML = '';\n            }\n\n            if (e.target.classList.contains('is-invalid')) {\n                e.target.classList.remove('is-invalid');\n                e.target.classList.remove('form-control');\n                e.target.removeAttribute('title');\n            }\n\n            score.focus();\n\n            if (!score.classList.contains('changeh')) {\n                score.addEventListener('change', self.changeMarkHandler.bind(this, self));\n                score.classList.add('changeh');\n            }\n\n        };\n\n        LevelControl.prototype.changeMarkHandler = function (s, e) {\n\n            // If it came from validatePreviousMarkValue we need to remove the class warning\n            s.cleanPreviousMarkWarning();\n            // Remove error message if the user inserted wrong data before.\n            e.target.classList.remove('total-input-error');\n            e.target.removeAttribute('data-toggle');\n            e.target.removeAttribute('data-placement');\n            e.target.removeAttribute('data-title');\n\n            const el = document.getElementById(e.target.getAttribute('aria-describedby'));\n\n            if (el != null) {\n                el.parentNode.removeChild(el);\n                e.target.removeAttribute('data-original-title');\n                e.target.removeAttribute('title');\n                e.target.removeAttribute('aria-describedby');\n\n            }\n\n            var levelid;\n\n            if (e.target.getAttribute('data-level-id') != null) {\n                levelid = e.target.getAttribute('data-level-id');\n            }\n            // Update the score for this criterion.\n            const criteria = FeditorHelper.getCriteriaJSON();\n            const criterion = FeditorHelper.getCriterionFromCriteriaCollection(document.getElementById(s.id), criteria);\n            const levelsdesc = s.getLevelDescriptors(s.id, criteria, levelid);\n            const score = (e.target.value).trim();\n            const nonum = /[a-z]/gi.test(e.target.value);\n\n            let error = false;\n            let message = '';\n\n            if (nonum) {\n                error = true;\n                message = 'Please insert a number value range';\n            } else {\n\n                if (score.indexOf('-') == -1 && score.indexOf('/') == -1) {\n                    error = true;\n                    message = 'Invalid value. Accepts min-max or min/max';\n                } else {\n                    // Evaluate min/max\n                    var [min, max] = FeditorHelper.getMinMax(score);\n                    if (min.length == 0 || max.length == 0) {\n                        error = true;\n                    } else if ((min.length > 0 && max.length > 0) && (parseFloat(min) > parseFloat(max))) {\n                        error = true;\n                        message = 'Min value is greater than max value';\n                    }\n\n                }\n            }\n\n            if (error) {\n                s.setErrorMessage(e, message);\n                error = false;\n                return;\n            }\n\n            var groupid;\n            // Update the total result input. with the highest value.\n            groupid = document.getElementById(s.id).getAttribute('data-criterion-group');\n\n            const resultRow = document.querySelector(`[data-criterion-group=\"${groupid}\"][data-row-type=\"result\"]`);\n            var total = (resultRow.querySelector(`#out-of-value-${groupid}`).innerHTML).split(\"/\");\n\n            total =  FeditorHelper.getMaxValueInLevelInCriterion(groupid);\n            const maxinput = resultRow.querySelector('.total-input');\n\n            levelsdesc[0].score = (e.target.value).trim();\n\n            if (levelsdesc[0].status == 'CREATED' || levelsdesc[0].status == 'UPDATED') {\n                levelsdesc[0].status = 'UPDATE';\n            }\n\n            resultRow.querySelector(`#out-of-value-${groupid}`).innerHTML = `/${total}`;\n\n            // Update the max attribute.\n            maxinput.setAttribute(\"max\", total);\n            criterion[0].totaloutof = total;\n\n            FeditorHelper.setCriteriaJSON(criteria);\n            FeditorHelper.setHiddenCriteriaJSON(criteria);\n\n        };\n\n        LevelControl.prototype.addDescriptor = function (e) {\n            const self = this;\n            e.stopImmediatePropagation();\n            e.preventDefault();\n\n            // Get the standard-desc-container  that contains the descritors.\n            const descriptorContainer = FeditorHelper.getPreviousElement(e.target.parentNode, '.standard-desc-container');\n            var positionLevel = 0;\n\n            let id;\n            if ((self.mode != 'edit') || descriptorContainer.children.length == 0) {\n                id = `${self.id}-${FeditorHelper.getRandomID()}`;\n                positionLevel = descriptorContainer.children.length; // By adding the delete set\n            } else {\n                id = `${self.id}-${descriptorContainer.children[0].getAttribute('id')}`;\n            }\n\n\n            var countingdel = false;\n\n            if (descriptorContainer.children.length > 0) {\n                positionLevel = descriptorContainer.children.length - 1; // When we add the first element, the delete set span is addedd too. we need to only count the divs t oget the right index.\n\n                if (descriptorContainer.children[0].classList.contains('action-delete-set-desc')) {\n                    countingdel = true;\n                }\n            }\n\n            if (self.parentid == undefined) { // Level with no descriptor, User clicked save anf make it ready\n                var editaddnewlevel = false;\n\n            } else if (self.parentid.includes('frubric-criteria-NEWID')) {\n                editaddnewlevel = self.parentid.includes('frubric-criteria-NEWID');\n            }\n\n\n            const context = {\n                id: id,\n                parentid: self.parentid,\n                edit: self.mode == 'edit',\n                editaddnewlevel: editaddnewlevel,\n                index: (countingdel) ? descriptorContainer.children.length - 1 : descriptorContainer.children.length,\n                poslevel: positionLevel\n            };\n\n\n            if (self.mode != 'edit') {\n                delete context.index;\n            }\n\n            Templates.render(self.LEVEL_DESCRIPTOR_INPUT, context)\n                .done(function (html, js) {\n\n                    let addDeleteSet = false;\n                    if (descriptorContainer.children.length == 0) {\n                        addDeleteSet = true\n                    }\n                    descriptorContainer.insertAdjacentHTML('beforeend', html);\n\n                    if (addDeleteSet) {\n                        descriptorContainer.insertAdjacentHTML(\"afterbegin\", '  <span class=\"action-delete-set-desc  first-time-render\"> <i class=\"fa fa-close  first-time-render\" title=\"Delete set of descriptors\"></i></span>');\n                        descriptorContainer.querySelector('.action-delete-set-desc').addEventListener('click', self.deleteSetCriterion.bind(self));\n                    }\n\n                    const container = descriptorContainer.lastChild;\n                    const action = container.querySelector('.action-el');\n                    const checkbox = container.querySelector('.standard-check');\n                    const descriptor = container.querySelector('.standard-desc');\n\n                    descriptor.addEventListener('click', self.clickDescriptorHandler.bind(this, self));\n                    action.addEventListener('click', self.deleteDescriptor.bind(self, descriptorContainer, container));\n                    checkbox.addEventListener('click', self.selectdescriptor.bind(this, self)); // TODO: DO I NEED THIS?\n\n                })\n                .fail(function (ex) {\n                    Log.debug(\"error...\");\n                });\n\n\n            let criteria = FeditorHelper.getCriteriaJSON();\n            let container = descriptorContainer.lastElementChild;\n\n            if (container != null) {\n                FeditorHelper.setCriteriaJSON(criteria);\n                FeditorHelper.setHiddenCriteriaJSON(criteria);\n            }\n        }\n\n\n\n        LevelControl.prototype.clickDescriptorHandler = function (s, e) {\n\n            let descriptor = e.target;\n            descriptor.focus();\n\n            if (e.target.classList.contains('is-invalid')) {\n                e.target.classList.remove('is-invalid');\n                e.target.classList.remove('form-control');\n                e.target.removeAttribute('title')\n            }\n            // Attach change event\n            descriptor.addEventListener('change', s.changeDescriptorHandler.bind(this, s));\n            // If you copy and paste content without clicking it doesnt pick up the change. Add paste event\n            descriptor.addEventListener('paste', s.changeDescriptorHandler.bind(this, s));\n\n        }\n\n        LevelControl.prototype.changeDescriptorHandler = function (s, e) {\n            const criteria = FeditorHelper.getCriteriaJSON();\n            const containerid = e.target.getAttribute('data-container-id');\n            let levelid;\n            let descriptorIndex = e.target.parentNode.getAttribute('descriptor-index');\n\n            if (descriptorIndex != null) {\n                levelid = e.target.parentNode.getAttribute('id');\n            } else {\n                descriptorIndex = Array.from(document.getElementById(containerid).parentNode.children).indexOf(e.target.parentNode) - 1;\n            }\n\n            // We are adding a descriptor to a level that is already in the DB. Make sure is not a rerender for failing\n            if (levelid != undefined && levelid.includes(\"-\") && !document.getElementById('id_criteria').classList.contains('is-invalid')) {\n                levelid.slice(levelid.indexOf('-') + 1, levelid.length);\n            }\n\n            const levelsdesc = s.getLevelDescriptors(s.id, criteria, levelid);\n            if (descriptorIndex > levelsdesc[0].descriptors.length) { // Add descriptors inbetween when updating descriptors in different order.\n                for (var i = (levelsdesc[0].descriptors.length); i < descriptorIndex; i++) {\n\n                    levelsdesc[0].descriptors.push({\n                        checked: false,\n                        descText: '',\n                        delete: 0,\n                        descriptorid: 0\n                    });\n                }\n\n            }\n\n            const desc = levelsdesc[0].descriptors[descriptorIndex];\n\n            if (desc == undefined) { // New entry\n                levelsdesc[0].descriptors.push({\n                    checked: false,\n                    descText: e.target.value,\n                    delete: 0,\n                    descriptorid: 0\n                });\n\n            } else { // Existing entry, update text.\n\n                desc.descText = e.target.value;\n            }\n\n            if (levelsdesc[0].status == 'CREATED' || levelsdesc[0].status == 'UPDATED') {\n                levelsdesc[0].status = 'UPDATE';\n            }\n\n            FeditorHelper.setCriteriaJSON(criteria);\n            FeditorHelper.setHiddenCriteriaJSON(criteria);\n\n        }\n\n        LevelControl.prototype.selectdescriptor = function (e, s) {\n\n            const containerid = s.target.getAttribute('data-container-id');\n            const criteria = FeditorHelper.getCriteriaJSON();\n            let levelsdesc;\n            let descriptorIndex = s.target.parentNode.getAttribute('descriptor-index');\n\n            if (descriptorIndex != null) {\n                const levelid = s.target.parentNode.getAttribute('id');\n                levelsdesc = e.getLevelDescriptors(e.id, criteria, levelid);\n            } else {\n                descriptorIndex = Array.from(document.getElementById(containerid).parentNode.children).indexOf(s.target.parentNode);\n                levelsdesc = e.getLevelDescriptors(e.id, criteria);\n            }\n\n            const d = levelsdesc[0].descriptors[descriptorIndex];\n            d.checked = s.target.checked;\n\n            // check if its already in the DB, if so, change the status\n            if (levelsdesc[0].status == 'CREATED' || levelsdesc[0].status == 'UPDATED') {\n                levelsdesc[0].status = 'UPDATE';\n            }\n            // Update the input.\n            FeditorHelper.setCriteriaJSON(criteria);\n            FeditorHelper.setHiddenCriteriaJSON(criteria);\n        }\n\n        LevelControl.prototype.deleteDescriptor = function (descriptorContainer, checkboxcontainer) {\n\n            var self = this;\n            if (checkboxcontainer.getAttribute('descriptor-index')) { // This means the descriptor is already saved in the BD. ask if theya re sure to remove\n\n                Str.get_strings([{\n                        key: 'confirm',\n                        component: 'gradingform_frubric'\n                    },\n                    {\n                        key: 'confirmdeletedescriptor',\n                        component: 'gradingform_frubric'\n                    },\n                    {\n                        key: 'yes'\n                    },\n                    {\n                        key: 'no'\n                    },\n\n                ]).done(function (strs) {\n                    Notification.confirm(strs[0], strs[1], strs[2], strs[3], function () {\n\n                        const criteria = FeditorHelper.getCriteriaJSON();\n                        const levelid = checkboxcontainer.getAttribute('id');\n                        const parentid = self.id;\n                        const descriptorIndex = checkboxcontainer.getAttribute('descriptor-index');\n\n                        const levelsdesc = self.getLevelDescriptors(parentid, criteria, levelid);\n                        const d = levelsdesc[0].descriptors[descriptorIndex];\n\n                        // Check that the descriptor you want to delete was saved in the DB.\n                        // Else, you just have to remove it and update the JSON to avoid updates to the level.\n                        if (d.descriptorid != 0) {\n                            d.delete = 1;\n                            levelsdesc[0].status = 'UPDATE';\n\n                            let countdeleted = 0;\n                            levelsdesc[0].descriptors.forEach(function (desc, index) {\n                                if (desc.delete == 1) {\n                                    countdeleted++;\n                                }\n                            }, countdeleted);\n\n                            // Check if its the only descritor in the level. If it is, then remove the level completely\n                            if (levelsdesc[0].descriptors.length == countdeleted) {\n                                const checkboxaux = checkboxcontainer;\n                                levelsdesc[0].status = 'DELETE';\n\n                                // Check if the definition only has one criterion. If it does, and the level is removed. then the criterion has to be deleted too\n                                if (criteria.length == 1) {\n                                    criteria[0].status = 'DELETE';\n                                }\n\n                                criteria.forEach(function (criterion) {\n                                    if (criterion.id == parentid) {\n                                        if (criterion.levels.length == 1) { // There is only one level in this criterion. Check if the descriptor has info.\n                                            criterion.status = 'DELETE'\n\n                                        } else {\n                                            criterion.status = 'UPDATE'\n                                        }\n                                    }\n                                }, parentid);\n\n\n                            }\n                        } else {\n                            levelsdesc[0].descriptors.splice(descriptorIndex, 1);\n                            self.updateDescriptorIndex(descriptorContainer);\n                        }\n\n                        checkboxcontainer.remove();\n\n                        // Update the input.\n                        FeditorHelper.setCriteriaJSON(criteria);\n                        FeditorHelper.setHiddenCriteriaJSON(criteria);\n\n\n                    }, function () {\n                        // For the cancel btn.\n                        return;\n                    });\n                });\n\n            } else {\n\n                const descriptorindex = checkboxcontainer.getAttribute('data-pos-level');\n                const parentid = self.id;\n                const criteria = FeditorHelper.getCriteriaJSON();\n                const row = document.getElementById(parentid);\n                const criterion = FeditorHelper.getCriterionFromCriteriaCollection(row, criteria);\n                const level = criterion[0].levels.filter(function (l) {\n                    if (l.id == parentid) {\n                        return l.descriptors;\n                    }\n                }, parentid);\n\n                const descriptors = (level[0]).descriptors;\n                descriptors.splice(descriptorindex, 1);\n                descriptorContainer.removeChild(checkboxcontainer);\n                self.updateDescriptorIndex(descriptorContainer);\n\n                // UPDATE JSON\n                FeditorHelper.setCriteriaJSON(criteria);\n                FeditorHelper.setHiddenCriteriaJSON(criteria);\n\n            }\n        };\n\n        LevelControl.prototype.deleteSingleDescriptorNotSavedInDB = function (checkboxcontainer) {\n\n            const descriptorindex = checkboxcontainer.getAttribute('data-pos-level');\n            const parentid = self.id;\n            const criteria = FeditorHelper.getCriteriaJSON();\n            const row = document.getElementById(parentid);\n            const criterion = FeditorHelper.getCriterionFromCriteriaCollection(row, criteria);\n            const level = criterion[0].levels.filter(function (l) {\n                if (l.id == parentid) {\n                    return l.descriptors;\n                }\n            }, parentid);\n\n            const descriptors = (level[0]).descriptors;\n            descriptors.splice(descriptorindex, 1);\n            descriptorContainer.removeChild(checkboxcontainer);\n            self.updateDescriptorIndex(descriptorContainer);\n            // UPDATE JSON\n            FeditorHelper.setCriteriaJSON(criteria);\n            FeditorHelper.setHiddenCriteriaJSON(criteria);\n        }\n\n\n        LevelControl.prototype.updateDescriptorIndex = function (descriptorContainer) {\n\n            $(descriptorContainer).children('div.checkbox-container').each(function (i) {\n                this.setAttribute('data-pos-level', i);\n            });\n        }\n\n\n\n        LevelControl.prototype.deleteSetCriterion = function (e) {\n\n            Str.get_strings([{\n                    key: 'confirm',\n                    component: 'gradingform_frubric'\n                },\n                {\n                    key: 'confirmdeletesetcriterion',\n                    component: 'gradingform_frubric'\n                },\n                {\n                    key: 'yes'\n                },\n                {\n                    key: 'no'\n                },\n\n            ]).done(function (strs) {\n                Notification.confirm(strs[0], strs[1], strs[2], strs[3], function () {\n                    const tr = e.target.closest('tr'); // get the tr this element is in\n                    const table = e.target.closest('.level-mark-desc-table');\n                    const criteria = JSON.parse(document.getElementById('id_criteria').value);\n                    const fromRenderer = e.target.classList.contains(\"first-time-render\"); // When adding a new descriptor that was not saved in the db, just delete it.\n\n                    if (table.rows.length == 1) {\n                        const level = table.closest(\"[data-criterion-group]\");\n\n                        if (!fromRenderer) {\n                            criteria.forEach(function (criterion) {\n                                if (criterion.id == level.getAttribute('data-criterion-group')) {\n                                    criterion.status = 'DELETE';\n\n                                    const cl = Object.values(criterion.levels);\n\n                                    cl.forEach(function (level) {\n\n                                        if (level.status != \"NEW\") { // Case: We want to add a new level and delete the current one.\n                                            level.status = 'DELETE';\n                                            criterion.status = \"UPDATE\";\n\n                                        }\n                                    }, criterion);\n                                }\n                            });\n\n                        }\n\n                        level.remove();\n\n                    } else {\n\n                        // It has a few levels.\n                        const crit = tr.closest(\"[data-criterion-group]\"); // This row has the criterion these levels belong to\n                        const descriptors = Array.from(e.target.parentNode.nextElementSibling.children);\n                        const descriptorids = [];\n\n                        descriptors.forEach(function (desc) {\n                            descriptorids.push(desc.id);\n                        }, descriptorids);\n\n                        const data = {\n                            crit: crit,\n                            descids: descriptorids\n                        }\n\n                        if (!fromRenderer) {\n                            criteria.forEach(function (criterion) {\n                                if (criterion.id == data.crit.getAttribute('data-criterion-group')) {\n                                    criterion.status = 'UPDATE';\n\n                                    if (!Array.isArray(criterion.levels)) { // Check if the criteria has levels\n                                        criterion.levels = Object.values(criterion.levels);\n                                    }\n                                    criterion.levels.forEach(function (level) {\n\n                                        if (data.descids.includes((level.id).toString())) {\n\n                                            level.descriptors.forEach(function (d) {\n                                                d.delete = 1;\n                                            });\n                                            level.status = 'DELETE';\n\n                                        }\n                                    }, data.descids);\n\n                                }\n                            }, data);\n                        }\n\n                        table.deleteRow(tr.rowIndex);\n                        // Controlar que el max value  refleje el maximo si hay cambios\n                    }\n\n                    // document.getElementById('id_criteria').value = JSON.stringify(criteria);\n                    FeditorHelper.setCriteriaJSON(criteria);\n                    FeditorHelper.setHiddenCriteriaJSON(criteria);\n\n                }, function () {\n                    // For the cancel btn.\n                    return;\n                });\n            });\n        }\n\n        LevelControl.prototype.deleteLevel = function (e) {\n\n            Str.get_strings([{\n                    key: 'confirm',\n                    component: 'gradingform_frubric'\n                },\n                {\n                    key: 'confirmdeletelevel',\n                    component: 'gradingform_frubric'\n                },\n                {\n                    key: 'yes'\n                },\n                {\n                    key: 'no'\n                },\n\n            ]).done(function (strs) {\n                Notification.confirm(strs[0], strs[1], strs[2], strs[3], function () {\n\n                    let criTable = document.getElementById('criteriaTable');\n                    const tr = e.target.parentNode.parentNode.parentNode;\n                    const criterion = FeditorHelper.getPreviousElement(tr, '.criterion-header');\n                    let criteria = FeditorHelper.getCriteriaJSON();\n                    const crid = tr.getAttribute('data-criterion-group')\n\n\n                    if (criterion.getAttribute('data-criterion-levels').length > 0) {\n\n                        const dbids = JSON.parse(criterion.getAttribute('data-criterion-levels')); // These are the ids of the levels given by the DB.\n                        const index = FeditorHelper.getDistanceFromCriterionHeader(tr, '.criterion-header');\n                        const dblevelid = dbids[index];\n\n\n                        var levels;\n\n                        for (let i = 0; i < criteria.length; i++) {\n                            if (criteria[i].id == crid) {\n                                criteria[i].status = 'UPDATE';\n                                levels = criteria[i].levels;\n                                break;\n                            }\n                        }\n\n                        for (let j = 0; j < levels.length; j++) {\n                            if (levels[j].id == dblevelid) {\n                                levels[j].status = 'DELETE';\n                                break;\n                            }\n                        }\n\n                    } else {\n\n                        // The Criteria has not been saved. No need to send it to the DB.\n\n                        const tr = e.target.closest('tr');\n                        const lid = tr.getAttribute('id');\n                        const cid = criterion.getAttribute('id');\n                        const d = {\n                            levelid: parseInt(lid),\n                            criterionid: cid\n                        }\n\n\n                        criteria.forEach(function (criterion) {\n\n                            if (criterion.cid == d.criterionid) {\n                                criterion.levels = criterion.levels.filter(function (level) {\n\n                                    if (level.id != d.levelid) {\n                                        return level;\n                                    }\n                                }, d);\n\n                            }\n                        }, d);\n\n                    }\n\n\n                    FeditorHelper.setCriteriaJSON(criteria);\n                    FeditorHelper.setHiddenCriteriaJSON(criteria);\n                    criTable.deleteRow(tr.rowIndex);\n\n\n                }, function () {\n                    // For the cancel btn.\n                    return;\n                });\n            });\n        };\n\n        LevelControl.prototype.editlevelhandler = function (e) {\n            let textarea = e.target;\n\n            textarea.removeAttribute('disabled');\n            textarea.focus();\n            textarea.addEventListener('change', this.changeLevelHandlerDisabled.bind(this, textarea));\n            textarea.addEventListener('focusout', this.focusoutHandlerDisabled);\n        };\n\n        LevelControl.prototype.changeLevelHandlerDisabled = function (txtarea, e) {\n\n            let id = e.target.parentNode.parentNode.parentNode.getAttribute('data-criterion-group');\n            const levelrow = e.target.parentNode.parentNode.parentNode;\n\n            // Get the criterion row this level belongs to\n            const criterionheader = FeditorHelper.getPreviousElement(levelrow, '.criterion-header');\n            let leveldbids = criterionheader.getAttribute('data-criterion-levels').length > 0 ? JSON.parse(criterionheader.getAttribute('data-criterion-levels')) : []; // Get the dbids\n\n            const criteriaJSON = FeditorHelper.getCriteriaJSON();\n            const rowIndex = e.target.parentNode.parentNode.parentNode.rowIndex;\n\n            let levelid = id + '_' + rowIndex;\n\n            if (leveldbids.length > 0) {\n                levelid = (leveldbids[rowIndex - 1] != undefined) ? `${id}_${leveldbids[rowIndex - 1]}` : levelid; // The criterion already exists but this is a new level, not saved in the DB yet.\n            }\n\n            const filterCriterion = criteriaJSON.filter(function (criterion, index) {\n                const id = e.target.parentNode.parentNode.parentNode.getAttribute('data-criterion-group');\n                criterion.rowindex = index;\n                if (id == criterion.id) {\n                    return criterion;\n                }\n            }, e);\n\n            // Find the level and update the values\n            if (filterCriterion[0].levels != undefined) {\n                var lev = null;\n                const critlevs = filterCriterion[0].levels;\n\n                for (let i = 0; i < critlevs.length; i++) {\n\n                    if ((critlevs[i]).id != levelid) {\n                        continue;\n                    } else {\n                        lev = critlevs[i];\n                        break;\n\n                    }\n                }\n\n                if (lev != null) {\n                    if (e.target.classList.contains('mark_txtarea')) {\n                        lev.score = e.target.value;\n                    } else {\n                        lev.definition = e.target.value;\n                    }\n                    if (lev.status == 'CREATED' || lev.status == 'UPDATED') { // It was updated before.\n                        lev.status = 'UPDATE';\n                    }\n\n                } else {\n\n                    let criterionLevel = {\n                        id: levelid,\n                        status: 'NEW',\n                        score: '',\n                        definition: ''\n                    };\n\n                    if (e.target.classList.contains('mark_txtarea')) {\n                        criterionLevel.score = e.target.value;\n                    } else {\n                        criterionLevel.definition = e.target.value;\n                    }\n                    (filterCriterion[0]).levels.push(criterionLevel);\n                }\n\n                if (FeditorHelper.getMode() == 'edit') {\n\n                    if (filterCriterion[0].cid.includes(\"NEWID\") != true) { // A new criterion added\n                        filterCriterion[0].status = \"UPDATE\"; // The criterion was updated because it has new levels.\n                    } else {\n                        filterCriterion[0].status = \"NEW\";\n                    }\n                }\n\n            }\n\n\n            FeditorHelper.setCriteriaJSON(criteriaJSON);\n            FeditorHelper.setHiddenCriteriaJSON(criteriaJSON);\n\n            e.target.setAttribute('disabled', true);\n        };\n\n        LevelControl.prototype.focusoutHandlerDisabled = function (e) {\n            e.target.setAttribute('disabled', true);\n        };\n\n        LevelControl.prototype.getLevelDescriptors = function (parentid, criteria, levelid) {\n            var self = this;\n            let row = '';\n\n            if (document.getElementById(parentid) == null) {\n                row = document.getElementById(self.level.id);\n            } else {\n                row = document.getElementById(parentid);\n            }\n\n            const criterion = FeditorHelper.getCriterionFromCriteriaCollection(row, criteria);\n            let ids;\n            // Get the level to add the descriptor\n            if (levelid != undefined) {\n                parentid = levelid; // compare to the id the DB gave to the level.\n            }\n\n            if (self.mode == 'edit' && levelid != undefined) { // if its come from the add descriptor we have the id of the level in the second part of the id given le\n                if (levelid.toString().indexOf('-') > -1) {\n                    parentid = levelid.slice(levelid.indexOf('-') + 1, levelid.length);\n                    ids = levelid.split('-');\n                    ids.forEach(function (id, index) {\n                        ids[index] = id.toString();\n                    }, ids);\n                }\n            }\n\n            const obj = {\n                mode: self.mode,\n                parentid: parentid,\n                parentidaux: self.parentidaux,\n                ids: ids\n\n            }\n\n            if (criterion[0].levels.length == 0) {\n                criterion[0].levels.push({\n                    score: '',\n                    status: \"NEW\",\n                    id: parentid,\n                    descriptors: [{\n                        checked: false,\n                        descText: '',\n                        delete: 0,\n                        descriptorid: 0\n                    }]\n                });\n            }\n            // User tried to save and make ready a criteria with a level with no descriptor.\n            //We are in the fix error view of the form\n            const levelsdesc = criterion[0].levels.filter(function (level) {\n                if (obj.ids != undefined) {\n                    if ((obj.ids).includes((level.id).toString())) {\n                        return level.descriptors;\n                    }\n                } else if (obj.parentid == (level.id).toString()\n                            || (obj.parentid).toString().includes((level.id).toString())) {\n                    return level.descriptors;\n                }\n\n\n            }, obj);\n\n\n            FeditorHelper.setCriteriaJSON(criteria);\n            FeditorHelper.setHiddenCriteriaJSON(criteria);\n\n            return levelsdesc;\n        };\n\n        LevelControl.prototype.setErrorMessage = function (e, message) {\n\n            e.target.classList.add('total-input-error');\n            e.target.setAttribute('data-toggle', 'tooltip');\n            e.target.setAttribute('data-placement', 'right');\n            e.target.setAttribute('data-title', message);\n        };\n\n        LevelControl.prototype.validatePreviousMarkValue = function () {\n            const self = this;\n\n            const previousLevel = document.getElementById(self.id).previousElementSibling;\n            const previousMark = previousLevel.querySelector('.fmark');\n            if (previousMark != null && previousMark.value == 0 && previousMark.value != \"\") {\n\n                previousLevel.classList.add('alert-warning');\n                previousMark.insertAdjacentHTML('afterend', '<small>Change Mark</small>');\n\n            }\n\n        };\n\n        LevelControl.prototype.cleanPreviousMarkWarning = function () {\n            const self = this;\n\n            const level = document.getElementById(self.id);\n            if (level.classList.contains('alert-warning')) {\n                level.classList.remove('alert-warning');\n                level.querySelector('.level-mark').removeChild(level.querySelector('small'));\n            }\n\n        };\n\n        LevelControl.prototype.countSelectedDescriptors = function () {\n\n        };\n\n\n\n\n\n\n        return {\n            init: init\n        };\n    });"],"names":["define","$","Log","Str","Notification","FeditorHelper","Templates","LevelControl","level","mode","id","parentid","this","parentidaux","LEVEL_DESCRIPTOR_INPUT","LEVEL_DECRIPTORS_DELETE_SET","prototype","main","self","classList","contains","editModeSetupEvents","nextElementSibling","validatePreviousMarkValue","setupEvents","getAttribute","previousElementSibling","del","markandesc","children","markdesctable","querySelector","firstcell","closest","addEventListener","deleteLevel","bind","rows","each","index","row","j","td","editmark","wy","i","container","editModeSetupEventsHelper","addDescriptor","deleteSetCriterion","desciptorContainer","counter","length","descriptorIndex","lid","x","setAttribute","action","checkbox","descriptor","clickDescriptorHandler","deleteDescriptor","selectdescriptor","marktd","descriptortd","e","score","target","innerHTML","remove","removeAttribute","focus","changeMarkHandler","add","s","cleanPreviousMarkWarning","el","document","getElementById","levelid","parentNode","removeChild","criteria","getCriteriaJSON","criterion","getCriterionFromCriteriaCollection","levelsdesc","getLevelDescriptors","value","trim","error","message","test","indexOf","min","max","getMinMax","parseFloat","setErrorMessage","groupid","resultRow","total","split","getMaxValueInLevelInCriterion","maxinput","status","totaloutof","setCriteriaJSON","setHiddenCriteriaJSON","stopImmediatePropagation","preventDefault","descriptorContainer","getPreviousElement","positionLevel","getRandomID","countingdel","undefined","editaddnewlevel","includes","context","edit","poslevel","render","done","html","js","addDeleteSet","insertAdjacentHTML","lastChild","fail","ex","debug","lastElementChild","changeDescriptorHandler","containerid","Array","from","slice","descriptors","push","checked","descText","delete","descriptorid","desc","checkboxcontainer","get_strings","key","component","strs","confirm","d","countdeleted","forEach","levels","splice","updateDescriptorIndex","descriptorindex","filter","l","deleteSingleDescriptorNotSavedInDB","tr","table","JSON","parse","fromRenderer","Object","values","crit","descriptorids","data","descids","isArray","toString","deleteRow","rowIndex","criTable","crid","dblevelid","getDistanceFromCriterionHeader","cid","parseInt","criterionid","editlevelhandler","textarea","changeLevelHandlerDisabled","focusoutHandlerDisabled","txtarea","levelrow","criterionheader","leveldbids","criteriaJSON","filterCriterion","rowindex","lev","critlevs","definition","criterionLevel","getMode","ids","obj","previousLevel","previousMark","countSelectedDescriptors","init"],"mappings":"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"}