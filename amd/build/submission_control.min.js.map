{"version":3,"file":"submission_control.min.js","sources":["../src/submission_control.js"],"sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable promise/always-return */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * @package   gradingform_frubric\n * @copyright 2021 Veronica Bermegui\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['core/log'],\n    function (Log) {\n        'use strict';\n\n        function init(submiteddata, definitionID) {\n\n            submiteddata = JSON.parse(submiteddata);\n            const control = new SubmissionControl(submiteddata, definitionID);\n            control.main(submiteddata, definitionID);\n        }\n\n        function SubmissionControl(definitionID) {\n            const self = this;\n            self.definitionID = definitionID;\n            self.submiteddata = JSON.parse(document.querySelector('.form-frubric-evaluate').getAttribute('data-values'));\n            self.definitionID = document.getElementById('advancedgrading-criteria').getAttribute('data-definition-id');\n\n\n        }\n\n        SubmissionControl.prototype.main = function () {\n            const self = this;\n            self.checkCriteria(self.submiteddata);\n            self.checkScore(self.criteria);\n        }\n\n        SubmissionControl.prototype.checkCriteria = function () {\n            var self = this;\n            Object.entries(self.submiteddata.criteria).forEach(([key, value]) => {\n\n                // Check score given to the criterion\n                const scoregiven = document.getElementById(`advancedgrading-frubric-criteria-${key}-level-grade`);\n                console.log(\"scoregiven\");\n                console.log(scoregiven);\n                if (scoregiven.value != '') {\n                    scoregiven.classList.remove('total-input-error');\n                    if (!document.querySelector('span.frubric-no-descriptor-error').hasAttribute('hidden')) {\n                        document.querySelector('span.frubric-no-descriptor-error').hidden = true;\n                    }\n                } else {\n                    scoregiven.classList.add('total-input-error');\n                    document.querySelector('span.frubric-no-descriptor-error').removeAttribute('hidden');\n                }\n\n                let maxallowed = document.getElementById(`advancedgrading-frubric-criteria-${key}-level-grade-out-of-value`).innerText.split('/');\n                maxallowed = maxallowed[maxallowed.length - 1];\n\n                if (parseFloat(scoregiven.value) > parseFloat(maxallowed)) {\n                    scoregiven.classList.add('total-input-error');\n                }\n\n                if (!document.querySelector('span.frubric-no-score-error').hasAttribute('hidden')) {\n                    document.querySelector('span.frubric-no-score-error').hidden = true;\n                }\n            });\n\n        }\n\n        SubmissionControl.prototype.checkScore = function () {\n            var self = this;\n            let scoregiven = document.getElementById(`advancedgrading-${self.definitionID}-frubric-total-grade`);\n            scoregiven.classList.remove('total-input-error');\n            let enteredscore = parseFloat(scoregiven.value);\n            let maxscore = document.getElementById(`advancedgrading-${self.definitionID}-frubric-total-grade-given`).innerText.split('/');\n            maxscore = parseFloat(maxscore[maxscore.length - 1]);\n\n            if (enteredscore > maxscore || enteredscore < 0) {\n                scoregiven.classList.add('total-input-error');\n            }\n\n        }\n\n        return {\n            init: init\n        };\n    });"],"names":["define","Log","SubmissionControl","definitionID","this","submiteddata","JSON","parse","document","querySelector","getAttribute","getElementById","prototype","main","checkCriteria","checkScore","criteria","Object","entries","forEach","_ref","key","value","scoregiven","console","log","classList","remove","hasAttribute","hidden","add","removeAttribute","maxallowed","innerText","split","length","parseFloat","enteredscore","maxscore","init"],"mappings":";;;;;AAwBAA,gDAAO,CAAC,aACJ,SAAUC,cAUGC,kBAAkBC,cACVC,KACRD,aAAeA,aADPC,KAERC,aAAeC,KAAKC,MAAMC,SAASC,cAAc,0BAA0BC,aAAa,gBAFhFN,KAGRD,aAAeK,SAASG,eAAe,4BAA4BD,aAAa,6BAKzFR,kBAAkBU,UAAUC,KAAO,WAClBT,KACRU,cADQV,KACWC,cADXD,KAERW,WAFQX,KAEQY,WAGzBd,kBAAkBU,UAAUE,cAAgB,WAExCG,OAAOC,QADId,KACSC,aAAaW,UAAUG,SAAQC,WAAEC,IAAKC,kBAGhDC,WAAaf,SAASG,0DAAmDU,qBAC/EG,QAAQC,IAAI,cACZD,QAAQC,IAAIF,YACY,IAApBA,WAAWD,OACXC,WAAWG,UAAUC,OAAO,qBACvBnB,SAASC,cAAc,oCAAoCmB,aAAa,YACzEpB,SAASC,cAAc,oCAAoCoB,QAAS,KAGxEN,WAAWG,UAAUI,IAAI,qBACzBtB,SAASC,cAAc,oCAAoCsB,gBAAgB,eAG3EC,WAAaxB,SAASG,0DAAmDU,kCAAgCY,UAAUC,MAAM,KAC7HF,WAAaA,WAAWA,WAAWG,OAAS,GAExCC,WAAWb,WAAWD,OAASc,WAAWJ,aAC1CT,WAAWG,UAAUI,IAAI,qBAGxBtB,SAASC,cAAc,+BAA+BmB,aAAa,YACpEpB,SAASC,cAAc,+BAA+BoB,QAAS,OAM3E3B,kBAAkBU,UAAUG,WAAa,eAEjCQ,WAAaf,SAASG,yCADfP,KACsDD,sCACjEoB,WAAWG,UAAUC,OAAO,yBACxBU,aAAeD,WAAWb,WAAWD,OACrCgB,SAAW9B,SAASG,yCAJbP,KAIoDD,4CAA0C8B,UAAUC,MAAM,KACzHI,SAAWF,WAAWE,SAASA,SAASH,OAAS,KAE7CE,aAAeC,UAAYD,aAAe,IAC1Cd,WAAWG,UAAUI,IAAI,sBAK1B,CACHS,cArEUlC,aAAcF,cAGR,IAAID,kBADpBG,aAAeC,KAAKC,MAAMF,cAC0BF,cAC5CU,KAAKR,aAAcF"}